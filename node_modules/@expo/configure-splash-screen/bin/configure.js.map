{"version":3,"file":"configure.js","sourceRoot":"","sources":["../src/configure.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport program from 'commander';\nimport colorString, { ColorDescriptor } from 'color-string';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport configureAndroid from './android';\nimport { ResizeMode, Platform } from './constants';\nimport configureIos from './ios';\n\n/**\n * These arguments have to be provided by the user or omitted if possible.\n */\ninterface Arguments {\n  backgroundColor: ColorDescriptor;\n  imagePath?: string;\n}\n\n/**\n * These might be optionally provided by the user. There are default values for them.\n */\ninterface Options {\n  resizeMode: ResizeMode;\n  platform: Platform;\n}\n\nasync function action(configuration: Arguments & Options) {\n  const { platform, ...restParams } = configuration;\n  const rootDir = path.resolve();\n  switch (platform) {\n    case Platform.ANDROID:\n      await configureAndroid(rootDir, restParams);\n      break;\n    case Platform.IOS:\n      await configureIos(rootDir, restParams);\n      break;\n    case Platform.ALL:\n    default:\n      await configureAndroid(rootDir, restParams);\n      await configureIos(rootDir, restParams);\n      break;\n  }\n}\n\nfunction getAvailableOptions(o: object) {\n  return Object.values(o).join(' | ');\n}\n\nfunction logErrorAndExit(errorMessage: string): never {\n  console.error(errorMessage);\n  process.exit(1);\n}\n\n/**\n * Ensures following semantic requirements are met:\n * @param configuration.imagePath path that points to a valid .png file\n * @param configuration.resizeMode ResizeMode.NATIVE is selected only with Platform.ANDROID\n * @param configuration.backgroundColor is valid hex #RGB/#RGBA color\n */\nasync function validateConfiguration(\n  configuration: Options & Omit<Arguments, 'backgroundColor'> & { backgroundColor: string }\n): never | Promise<Options & Arguments> {\n  const { resizeMode, imagePath: imagePathString, platform } = configuration;\n\n  // check for `native` resizeMode being selected only for `android` platform\n  if (resizeMode === ResizeMode.NATIVE && platform !== Platform.ANDROID) {\n    logErrorAndExit(`error: Invalid resizeMode '${resizeMode}' for platform '${platform}'.`);\n  }\n\n  const backgroundColor = colorString.get(configuration.backgroundColor);\n  if (!backgroundColor) {\n    logErrorAndExit(\n      `error: Invalid value '${configuration.backgroundColor}' for argument 'backgroundColor'.`\n    );\n  }\n\n  if (imagePathString) {\n    const imagePath = path.resolve(imagePathString);\n    // check if `imagePath` exists\n    if (!(await fs.pathExists(imagePath))) {\n      logErrorAndExit(\n        `error: Invalid path '${imagePathString}' for argument 'imagePath'. File does not exist. Provide path to a valid .png file.`\n      );\n    }\n\n    // check if `imagePath` is a readable .png file\n    if (path.extname(imagePath) !== '.png') {\n      logErrorAndExit(\n        `error: Invalid path '${imagePathString}' for argument 'imagePath'. File is not a .png file. Provide path to a valid .png file.`\n      );\n    }\n  }\n\n  return {\n    ...configuration,\n    backgroundColor,\n  };\n}\n\nfunction validateResizeMode(userInput: string) {\n  if (!Object.values<string>(ResizeMode).includes(userInput)) {\n    logErrorAndExit(`error: Unknown value '${userInput}' for option 'resizeMode'.`);\n  }\n  return userInput;\n}\n\nfunction validatePlatform(userInput: string) {\n  if (!Object.values<string>(Platform).includes(userInput)) {\n    logErrorAndExit(`error: Unknown value '${userInput}' for option 'platform'.`);\n  }\n  return userInput;\n}\n\nprogram\n  .arguments('<backgroundColor> [imagePath]')\n  .description(\n    'Idempotent operation that configures native splash screens using passed .png file that would be used in native splash screen.',\n    {\n      backgroundColor: `Valid css-formatted color (hex (#RRGGBB[AA]), rgb[a], hsl[a], named color (https://drafts.csswg.org/css-color/#named-colors)) that would be used as background color for native splash screen view.`,\n      imagePath: `Path to a valid .png image.`,\n    }\n  )\n  .allowUnknownOption(false)\n  .option(\n    '-r, --resize-mode [resizeMode]',\n    `ResizeMode to be used for native splash screen image. Available values: ${getAvailableOptions(\n      ResizeMode\n    )} (only available for android platform)).`,\n    validateResizeMode,\n    ResizeMode.CONTAIN\n  )\n  .option(\n    '-p, --platform [platform]',\n    `Selected platform to configure. Available values: ${getAvailableOptions(Platform)}.`,\n    validatePlatform,\n    Platform.ALL\n  )\n  .action(\n    async (\n      backgroundColor: string,\n      imagePath: string | undefined,\n      { resizeMode, platform }: program.Command & Options\n    ) => {\n      const configuration = { imagePath, backgroundColor, resizeMode, platform };\n      const validatedConfiguration = await validateConfiguration(configuration);\n      return action(validatedConfiguration);\n    }\n  );\n\nprogram.parse(process.argv);\n"]}